PROBLEM DESCRIPTION:
	
	The sushi bar problem: Imagine a sushi bar with 5 seats. If you 
arrive while there is an empty seat, you can take a seat immediately. But 
if you arrive when all 5 seats are full, that means that all of them are 
dining together, and you will have to wait for the entire party
to leave before you sit down. Puzzle: write code (using semaphores) for 
customers entering and leaving the sushi bar that enforces these 
requirements.

FUNCTIONS USED AS A BRIEF EXPLANATION:

NOTE: The term ‘customer’ refers to unique threads that were created in 
the main() function.

1.void to_dine()
     a.	This function checks if a customer has vacant seats and can dine in or has to wait till the entire party leaves if there are already 5 customers eating sushi.

2.void to_rise()
     a.	After eating, each customer leaves and accordingly, the number of vacancies increases.
     b.	But till all the 5 members of the party leaves, no customer can dine in. This is ensured in this function.

3.void *transfer()
     a.	This is similar to the main function, but for threads.
     b.	This is where from the respective functions are called. It is as follows
             i.	First, a customer calls to_dine() and starts eating or waits and eat.
            ii.	It is assumed that the customer eats for a while, say 4 seconds.
           iii.	Then, the customer calls to_rise() and leaves the sushi bar.

4.int main()
     a.	The number of customers is asked from the programmer.
     b.	Semaphores are initialized with the respective values.
     c.	The pthreads are created and executed.
     d.	Finally, the semaphores are destroyed.

